@page "/habits"
@using Microsoft.AspNetCore.Authorization
@using MinimalHabitsBlazor.Models
@using MinimalHabitsBlazor.Services
@attribute [Authorize]
@inject HabitService HabitService

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <h3>My Habits</h3>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Add New Habit</h5>
                    <EditForm Model="@newHabit" OnValidSubmit="HandleAddHabit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="name">Habit Name</label>
                            <InputText id="name" @bind-Value="newHabit.Name" class="form-control" disabled="@isLoading" />
                            <ValidationMessage For="@(() => newHabit.Name)" />
                        </div>

                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Adding...</span>
                            }
                            else
                            {
                                <span>Add Habit</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            @if (habits == null)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!habits.Any())
            {
                <div class="alert alert-info">
                    You haven't created any habits yet. Add your first habit above!
                </div>
            }
            else
            {
                <div class="list-group">
                    @foreach (var habit in habits)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-1">@habit.Name</h5>
                                <small class="text-muted">@habit.Entries.Count entries</small>
                            </div>
                            <button class="btn btn-danger btn-sm" @onclick="() => HandleDeleteHabit(habit.Id)" disabled="@isLoading">
                                Delete
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Habit>? habits;
    private HabitDto newHabit = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadHabits();
    }

    private async Task LoadHabits()
    {
        try
        {
            habits = await HabitService.GetHabitsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load habits. Please try again.";
        }
    }

    private async Task HandleAddHabit()
    {
        errorMessage = string.Empty;
        try
        {
            isLoading = true;
            var result = await HabitService.CreateHabitAsync(newHabit);
            if (result != null)
            {
                newHabit = new HabitDto(); // Reset form
                await LoadHabits();
            }
            else
            {
                errorMessage = "Failed to create habit. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while creating the habit.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleDeleteHabit(int id)
    {
        errorMessage = string.Empty;
        try
        {
            isLoading = true;
            var success = await HabitService.DeleteHabitAsync(id);
            if (success)
            {
                await LoadHabits();
            }
            else
            {
                errorMessage = "Failed to delete habit. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while deleting the habit.";
        }
        finally
        {
            isLoading = false;
        }
    }
} 